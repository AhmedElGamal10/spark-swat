#pragma OPENCL EXTENSION cl_khr_fp64 : enable

static __global void *alloc(__global void *heap, volatile __global uint *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   __global unsigned char *cheap = (__global unsigned char *)heap;
   uint rounded = nbytes + (8 - (nbytes % 8));
   uint offset = atomic_add(free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (__global void *)(cheap + offset);
}

typedef struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_Tuple2InputTest$_s{
   
} org_apache_spark_rdd_cl_tests_Tuple2InputTest$;


typedef struct __attribute__ ((packed)) scala_Tuple2_I_I_s{
   int  _1;
   int  _2;
   
} scala_Tuple2_I_I;

typedef struct This_s{
   } This;
static int org_apache_spark_rdd_cl_tests_Tuple2InputTest$$anon$1__apply(This *this, __global scala_Tuple2_I_I* in){

   return((in->_1 + in->_2));
}
__kernel void run(
      __global int * in0_1, __global int * in0_2, __global scala_Tuple2_I_I *in0, 
      __global int* out, int N) {
   int i = get_global_id(0);
   int nthreads = get_global_size(0);
   This thisStruct;
   This* this=&thisStruct;
   __global scala_Tuple2_I_I *my_in0 = in0 + get_global_id(0);
   for (; i < N; i += nthreads) {
      my_in0->_1 = in0_1[i]; my_in0->_2 = in0_2[i]; 
      out[i] = org_apache_spark_rdd_cl_tests_Tuple2InputTest$$anon$1__apply(this, my_in0);
      
   }
}

#pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_global_int32_extended_atomics : enable
#pragma OPENCL EXTENSION cl_khr_local_int32_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_local_int32_extended_atomics : enable
static int atomicAdd(__global int *_arr, int _index, int _delta){
   return atomic_add(&_arr[_index], _delta);
}
#pragma OPENCL EXTENSION cl_khr_fp64 : enable

static __global void *alloc(__global void *heap, volatile __global uint *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   __global unsigned char *cheap = (__global unsigned char *)heap;
   uint rounded = nbytes + (8 - (nbytes % 8));
   uint offset = atomic_add(free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (__global void *)(cheap + offset);
}

typedef struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_PrimitiveInputObjectOutputTest$_s{
   
} org_apache_spark_rdd_cl_tests_PrimitiveInputObjectOutputTest$;


typedef struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_Point_s{
   float  x;
   float  y;
   float  z;
   
} org_apache_spark_rdd_cl_tests_Point;

typedef struct This_s{
   __global void *heap;
   __global uint *free_index;
   int alloc_failed;
   unsigned int heap_size;
   } This;
static __global org_apache_spark_rdd_cl_tests_Point * org_apache_spark_rdd_cl_tests_Point___init_(__global org_apache_spark_rdd_cl_tests_Point *this, float x, float y, float z){

   this->x=x;
   this->y=y;
   this->z=z;
   (this);
   return (this);
}
static __global org_apache_spark_rdd_cl_tests_Point *org_apache_spark_rdd_cl_tests_PrimitiveInputObjectOutputTest$$anon$1__apply(This *this, int in){

   __global org_apache_spark_rdd_cl_tests_Point * __alloc0 = (__global org_apache_spark_rdd_cl_tests_Point *)alloc(this->heap, this->free_index, this->heap_size, sizeof(org_apache_spark_rdd_cl_tests_Point), &this->alloc_failed);
   if (this->alloc_failed) { return (0x0); }
   return(org_apache_spark_rdd_cl_tests_Point___init_(__alloc0, (float)(in + 1), (float)(in + 2), (float)(in + 3)));
}
__kernel void run(
      __global int* in0, 
      __global org_apache_spark_rdd_cl_tests_Point* out, __global void *heap, __global uint *free_index, unsigned int heap_size, __global int *processing_succeeded, __global int *any_failed, int N) {
   int i = get_global_id(0);
   int nthreads = get_global_size(0);
   This thisStruct;
   This* this=&thisStruct;
   this->heap = heap;
   this->free_index = free_index;
   this->heap_size = heap_size;
   for (; i < N; i += nthreads) {
      if (processing_succeeded[i]) continue;
      
      this->alloc_failed = 0;
      __global org_apache_spark_rdd_cl_tests_Point* result = org_apache_spark_rdd_cl_tests_PrimitiveInputObjectOutputTest$$anon$1__apply(this, in0[i]);
      if (this->alloc_failed) {
         processing_succeeded[i] = 0;
         *any_failed = 1;
      } else {
         processing_succeeded[i] = 1;
         out[i] = *result;
      }
   }
}

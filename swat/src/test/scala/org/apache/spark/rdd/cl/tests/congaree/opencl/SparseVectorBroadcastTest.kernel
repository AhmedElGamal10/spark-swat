#pragma OPENCL EXTENSION cl_khr_fp64 : enable

static __global void *alloc(__global void *heap, volatile __global uint *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   __global unsigned char *cheap = (__global unsigned char *)heap;
   uint rounded = nbytes + (8 - (nbytes % 8));
   uint offset = atomic_add(free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (__global void *)(cheap + offset);
}
typedef struct __attribute__ ((packed)) org_apache_spark_mllib_linalg_SparseVector_s org_apache_spark_mllib_linalg_SparseVector;
typedef struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_SparseVectorBroadcastTest__s org_apache_spark_rdd_cl_tests_SparseVectorBroadcastTest_;

struct __attribute__ ((packed)) org_apache_spark_mllib_linalg_SparseVector_s{
   __global int*  indices;
   __global double*  values;
   int  size;
   int  tiling;
   
};


struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_SparseVectorBroadcastTest__s{
   
};

typedef struct This_s{
   __global org_apache_spark_mllib_linalg_SparseVector *broadcast$1; ;
   int broadcast$1__javaArrayLength;
   } This;

static int org_apache_spark_mllib_linalg_SparseVector__size(__global org_apache_spark_mllib_linalg_SparseVector *this) {
    return (this->size);
}



static __global int* org_apache_spark_mllib_linalg_SparseVector__indices(__global org_apache_spark_mllib_linalg_SparseVector *this) {
    return (this->indices);
}



static __global double* org_apache_spark_mllib_linalg_SparseVector__values(__global org_apache_spark_mllib_linalg_SparseVector *this) {
    return (this->values);
}


static double org_apache_spark_rdd_cl_tests_SparseVectorBroadcastTest__anon_1__apply_mcDI_sp(This *this_ptr, int in){

   return(
   {
   
      double sum = 0.0;
      int i = 0;
      for (; i<5; i = i + 1){
      
         sum = sum + (org_apache_spark_mllib_linalg_SparseVector__values(&(this_ptr->broadcast$1[i]))[(&this_ptr->broadcast$1[i])->tiling * (i)] + (double)org_apache_spark_mllib_linalg_SparseVector__indices(&(this_ptr->broadcast$1[i]))[(&this_ptr->broadcast$1[i])->tiling * (i)]);
      }
      sum;
   });
}
static double org_apache_spark_rdd_cl_tests_SparseVectorBroadcastTest__anon_1__apply(This *this_ptr, int in){

   return(org_apache_spark_rdd_cl_tests_SparseVectorBroadcastTest__anon_1__apply_mcDI_sp(this_ptr, in));
}
__kernel void run(
      __global int* restrict in0, 
      __global double* restrict out, __global org_apache_spark_mllib_linalg_SparseVector * restrict broadcast$1, __global int * restrict broadcast$1_indices, __global double * restrict broadcast$1_values, __global int * restrict broadcast$1_sizes, __global int * restrict broadcast$1_offsets, int nbroadcast$1, int broadcast$1_tiling, int broadcast$1__javaArrayLength, int N, int iter) {
   This thisStruct;
   This* this_ptr=&thisStruct;
   this_ptr->broadcast$1 = broadcast$1;
   for (int j = 0; j < nbroadcast$1; j++) {
      (this_ptr->broadcast$1)[j].values = broadcast$1_values + broadcast$1_offsets[j];
      (this_ptr->broadcast$1)[j].indices = broadcast$1_indices + broadcast$1_offsets[j];
      (this_ptr->broadcast$1)[j].size = broadcast$1_sizes[j];
      (this_ptr->broadcast$1)[j].tiling = broadcast$1_tiling;
   }
;
   this_ptr->broadcast$1__javaArrayLength = broadcast$1__javaArrayLength;
   for (int i = get_global_id(0); i < N; i += get_global_size(0)) {
      out[i] = org_apache_spark_rdd_cl_tests_SparseVectorBroadcastTest__anon_1__apply(this_ptr, in0[i]);
      
   }
}

static __global void *alloc(__global void *heap, volatile __global uint *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   __global unsigned char *cheap = (__global unsigned char *)heap;
   uint rounded = nbytes + (8 - (nbytes % 8));
   uint offset = atomic_add(free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (__global void *)(cheap + offset);
}

typedef struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_ReferenceExternalArrayTest$_s{
   
} org_apache_spark_rdd_cl_tests_ReferenceExternalArrayTest$;

typedef struct This_s{
   __global int* arr$1;
   int arr$1__javaArrayLength;
   } This;
static int org_apache_spark_rdd_cl_tests_ReferenceExternalArrayTest$$anon$1__apply$mcII$sp(This *this, int in){

   return((((in + this->arr$1[0]) + this->arr$1[1]) + this->arr$1[2]));
}
static int org_apache_spark_rdd_cl_tests_ReferenceExternalArrayTest$$anon$1__apply(This *this, int in){

   return(org_apache_spark_rdd_cl_tests_ReferenceExternalArrayTest$$anon$1__apply$mcII$sp(this, in));
}
__kernel void run(
      __global int* in0, 
      __global int* out, __global int* arr$1, int arr$1__javaArrayLength, int N) {
   int i = get_global_id(0);
   int nthreads = get_global_size(0);
   This thisStruct;
   This* this=&thisStruct;
   this->arr$1 = arr$1;
   this->arr$1__javaArrayLength = arr$1__javaArrayLength;
   for (; i < N; i += nthreads) {
      out[i] = org_apache_spark_rdd_cl_tests_ReferenceExternalArrayTest$$anon$1__apply(this, in0[i]);
      
   }
}

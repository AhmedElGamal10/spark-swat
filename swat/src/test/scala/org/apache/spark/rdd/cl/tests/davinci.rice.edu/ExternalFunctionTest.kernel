#pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_global_int32_extended_atomics : enable
#pragma OPENCL EXTENSION cl_khr_local_int32_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_local_int32_extended_atomics : enable
static int atomicAdd(__global int *_arr, int _index, int _delta){
   return atomic_add(&_arr[_index], _delta);
}
#pragma OPENCL EXTENSION cl_khr_fp64 : enable

static __global void *alloc(__global void *heap, volatile __global uint *free_index, unsigned int heap_size, int nbytes, int *alloc_failed) {
   __global unsigned char *cheap = (__global unsigned char *)heap;
   uint rounded = nbytes + (8 - (nbytes % 8));
   uint offset = atomic_add(free_index, rounded);
   if (offset + nbytes > heap_size) { *alloc_failed = 1; return 0x0; }
   else return (__global void *)(cheap + offset);
}

typedef struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_ExternalFunctionTest$_s{
   
} org_apache_spark_rdd_cl_tests_ExternalFunctionTest$;


typedef struct __attribute__ ((packed)) org_apache_spark_rdd_cl_tests_Point_s{
   float  x;
   float  y;
   float  z;
   
} org_apache_spark_rdd_cl_tests_Point;

typedef struct This_s{
   __global void *heap;
   __global uint *free_index;
   int alloc_failed;
   unsigned int heap_size;
   } This;
static void org_apache_spark_rdd_cl_tests_Point__z_$eq(__global org_apache_spark_rdd_cl_tests_Point *this, float x$1){

   this->z=x$1;
   return;
}
static float org_apache_spark_rdd_cl_tests_Point__z(__global org_apache_spark_rdd_cl_tests_Point *this){
   return this->z;
}
static void org_apache_spark_rdd_cl_tests_Point__y_$eq(__global org_apache_spark_rdd_cl_tests_Point *this, float x$1){

   this->y=x$1;
   return;
}
static float org_apache_spark_rdd_cl_tests_Point__y(__global org_apache_spark_rdd_cl_tests_Point *this){
   return this->y;
}
static void org_apache_spark_rdd_cl_tests_Point__x_$eq(__global org_apache_spark_rdd_cl_tests_Point *this, float x$1){

   this->x=x$1;
   return;
}
static float org_apache_spark_rdd_cl_tests_Point__x(__global org_apache_spark_rdd_cl_tests_Point *this){
   return this->x;
}
static void org_apache_spark_rdd_cl_tests_Point__update_values(__global org_apache_spark_rdd_cl_tests_Point *this, int inc){

   org_apache_spark_rdd_cl_tests_Point__x_$eq(this, (this->x + (float)inc));
   org_apache_spark_rdd_cl_tests_Point__y_$eq(this, (this->y + (float)inc));
   org_apache_spark_rdd_cl_tests_Point__z_$eq(this, (this->z + (float)inc));
   return;
}
static __global org_apache_spark_rdd_cl_tests_Point * org_apache_spark_rdd_cl_tests_Point___init_(__global org_apache_spark_rdd_cl_tests_Point *this, float x, float y, float z){

   this->x=x;
   this->y=y;
   this->z=z;
   ;
   return (this);
}
static __global org_apache_spark_rdd_cl_tests_Point *org_apache_spark_rdd_cl_tests_ExternalFunctionTest$$anon$1__apply(This *this, __global org_apache_spark_rdd_cl_tests_Point* in){

   return(
   {
   
      __global org_apache_spark_rdd_cl_tests_Point * __alloc0 = (__global org_apache_spark_rdd_cl_tests_Point *)alloc(this->heap, this->free_index, this->heap_size, sizeof(org_apache_spark_rdd_cl_tests_Point), &this->alloc_failed);
      if (this->alloc_failed) { return (0x0); }
       __global org_apache_spark_rdd_cl_tests_Point *p = org_apache_spark_rdd_cl_tests_Point___init_(__alloc0, (in->x + (float)1), (in->y + (float)2), (in->z + (float)3));
      org_apache_spark_rdd_cl_tests_Point__update_values(p, 4);
      p;
   });
}
__kernel void run(
      __global org_apache_spark_rdd_cl_tests_Point* in0, 
      __global org_apache_spark_rdd_cl_tests_Point* out, __global void *heap, __global uint *free_index, unsigned int heap_size, __global int *processing_succeeded, int N, int iter) {
   This thisStruct;
   This* this=&thisStruct;
   this->heap = heap;
   this->free_index = free_index;
   this->heap_size = heap_size;
   for (int i = get_global_id(0); i < N; i += get_global_size(0)) {
      if (iter == 0) processing_succeeded[i] = 0;
      else if (processing_succeeded[i]) continue;
      this->alloc_failed = 0;
      __global org_apache_spark_rdd_cl_tests_Point* result = org_apache_spark_rdd_cl_tests_ExternalFunctionTest$$anon$1__apply(this, in0 + i);
      if (!this->alloc_failed) {
         processing_succeeded[i] = 1;
         out[i] = *result;
      }
   }
}
